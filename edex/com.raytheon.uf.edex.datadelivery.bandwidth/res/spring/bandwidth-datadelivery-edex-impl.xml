<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://camel.apache.org/schema/spring
    http://camel.apache.org/schema/spring/camel-spring.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd">

    <tx:annotation-driven transaction-manager="metadataTxManager"
        proxy-target-class="true" />

    <tx:annotation-driven transaction-manager="admin_metadataTxManager"
        proxy-target-class="true" />

    <!-- Stores beans that are used in bandwidth-datadelivery.xml, but that 
        have different implementations between production code and test code -->
    <bean
        class="com.raytheon.uf.edex.datadelivery.bandwidth.EdexBandwidthContextFactory">
        <!-- This bean version is used to set the EDEX instance of BandwidthManager -->
        <constructor-arg ref="bandwidthManager" />
    </bean>

    <bean id="admin_bandwidthAllocationDao"
        class="com.raytheon.uf.edex.datadelivery.bandwidth.hibernate.BandwidthAllocationDao">
        <property name="sessionFactory" ref="admin_metadataSessionFactory" />
    </bean>

    <bean id="hibernateBandwidthDbInit"
        class="com.raytheon.uf.edex.datadelivery.bandwidth.hibernate.HibernateBandwidthDbInit">
        <property name="dao" ref="admin_bandwidthAllocationDao" />
    </bean>

    <bean id="retrievalAgent"
        class="com.raytheon.uf.edex.datadelivery.bandwidth.retrieval.SubscriptionRetrievalAgent">
        <constructor-arg value="${bandwidth.default.retrieval.priority}" />
        <constructor-arg ref="retrievalHandler" />
        <constructor-arg ref="ProviderHandler" />
    </bean>

    <!-- Used as the context for creating the BandwidthManager -->
    <bean id="bandwidthContextFactory"
        class="com.raytheon.uf.edex.datadelivery.bandwidth.EdexBandwidthContextFactory">
        <!-- The bandwidth dao implementation -->
        <constructor-arg ref="hibernateBandwidthDao" />
        <!-- TODO: Switch to use database bandwidth buckets 
        <constructor-arg ref="hibernateBandwidthBucketDao" /> -->
        <constructor-arg>
            <bean
                class="com.raytheon.uf.edex.datadelivery.bandwidth.InMemoryBandwidthBucketDao" />
        </constructor-arg>
        <!-- The bandwidth manager initializer -->
        <constructor-arg ref="bandwidthInitializer" />
        <!-- The strategy for how to create the bandwidth manager -->
        <constructor-arg ref="bandwidthManagerCreator" />
        <!-- The db initializer -->
        <constructor-arg ref="hibernateBandwidthDbInit" />
        <!-- Registry handlers required for EdexBandwidthManager -->
        <constructor-arg ref="DataSetMetaDataHandler" />
        <constructor-arg ref="SubscriptionHandler" />
        <constructor-arg ref="subscriptionNotificationService" />
        <constructor-arg ref="findActiveSubscriptionsForRoute" />
        <constructor-arg ref="retrievalAgent" />
    </bean>

    <camelContext id="bandwidth-context" xmlns="http://camel.apache.org/schema/spring"
        errorHandlerRef="errorHandler">
        <endpoint id="purgeBandwidthAllocationTimer" uri="timer://purgeBandwidthAllocations?fixedRate=true&amp;period=5m"/>
        <route id="purgeBandwidthAllocationRoute">
            <from ref="purgeBandwidthAllocationTimer" />
            <doTry>
                <bean ref="bandwidthManager" method="purgeAllocations" />
                <doCatch>
                    <exception>java.lang.Throwable</exception>
                    <to
                        uri="log:purge?level=ERROR" />
                </doCatch>
            </doTry>
        </route>
	</camelContext>
</beans>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
  http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <bean id="crawlerCommunicationStrategy" class="com.raytheon.uf.edex.datadelivery.harvester.crawler.FileCommunicationStrategy" />

    <bean id="MetaDataProcessor" class="com.raytheon.uf.edex.datadelivery.harvester.CrawlMetaDataHandler" depends-on="registryInit">
        <constructor-arg ref="crawlerCommunicationStrategy" />
        <constructor-arg ref="ProviderHandler" />
    </bean>
  	
    <!-- Start of DataSetMetaData purge configuration -->
    <bean id="DataSetMetaDataPurgeLauncher" class="com.raytheon.uf.edex.datadelivery.harvester.purge.DataSetMetaDataPurgeLauncher" depends-on="registryInit">
        <constructor-arg ref="registryObjectDao" />
    </bean>

    <camelContext id="DataSetMetaDataPurge-context"
        xmlns="http://camel.apache.org/schema/spring"
        errorHandlerRef="errorHandler">

        <endpoint id="dataSetMetaDataPurgeCron" uri="quartz://datadelivery/metaDataPurge/?cron=${metadata-purge.cron}"/>
        <endpoint id="dataSetMetaDataWorkEndpoint" uri="jms-generic:queue:dataSetMetaDataPurgeWork?concurrentConsumers=1&amp;threadName=dataSetMetaDataPurge"/>

        <route id="metaDataPurge">
            <from uri="dataSetMetaDataPurgeCron" />
            <to uri="jms-generic:queue:dataSetMetaDataPurgeWork" />
        </route>

        <route id="dataSetMetaDataPurgeWork">
            <from uri="dataSetMetaDataWorkEndpoint" />
            <doTry>
                <pipeline>
                    <bean ref="DataSetMetaDataPurgeLauncher" method="runPurge" />
                </pipeline>
                <doCatch>
                    <exception>java.lang.Throwable</exception>
                    <to uri="log:metaDataPurge?level=ERROR"/>
                </doCatch>
            </doTry>
        </route>

    </camelContext>
    
    <camelContext id="MetaData-context"
        xmlns="http://camel.apache.org/schema/spring"
        errorHandlerRef="errorHandler">

        <endpoint id="metaDataCron" uri="quartz://datadelivery/harvester/?cron=${metadata-process.cron}"/>
        <endpoint id="harvesterProcessWorkEndpoint" uri="jms-generic:queue:metaDataProcessWork?concurrentConsumers=${metadata-process.threads}&amp;threadName=harvester"/>

        <route id="metaDataProcess">
            <from uri="metaDataCron" />
            <to uri="jms-generic:queue:metaDataProcessWork" />
        </route>
                
        <route id="metaDataProcessWork">
            <from uri="harvesterProcessWorkEndpoint" />
            <doTry>
                <pipeline>
                    <bean ref="MetaDataProcessor" method="metaDataCheck" />
                </pipeline>
                <doCatch>
                    <exception>java.lang.Throwable</exception>
                    <to uri="log:metaDataProcess?level=ERROR"/>
                </doCatch>
            </doTry>
        </route>

    </camelContext>
</beans>